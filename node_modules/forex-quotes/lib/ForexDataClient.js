'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * This library is provided without warranty under the MIT license
 * Created by Jacob Davis <jacob@1forge.com>
 */

var fetch = require("node-fetch");
var io = require('socket.io-client');

var ForexDataClient = function () {
    function ForexDataClient(api_key) {
        _classCallCheck(this, ForexDataClient);

        this.api_key = api_key;
        this.base_uri = 'https://forex.1forge.com/1.0.3/';
    }

    _createClass(ForexDataClient, [{
        key: 'login',
        value: function login() {
            this.socket.emit('login', this.api_key);
        }
    }, {
        key: 'initializeSocketClient',
        value: function initializeSocketClient() {
            var _this = this;

            this.socket = io.connect('https://socket.forex.1forge.com:3000');

            this.socket.on('login', function () {
                _this.login();
            });

            this.socket.on('post_login_success', function () {
                if (_this.post_login) {
                    _this.post_login(_this);
                }
            });
        }
    }, {
        key: 'unsubscribeFromAll',
        value: function unsubscribeFromAll() {
            if (!this.socket.connected) {
                return console.log("You must be logged in before unsubscribing from symbols");
            }

            this.socket.emit('unsubscribe_from_all');
        }
    }, {
        key: 'unsubscribeFrom',
        value: function unsubscribeFrom(symbol) {
            var _this2 = this;

            if (!this.socket.connected) {
                return console.log("You must be logged in before unsubscribing from symbols");
            }

            if (Array.isArray(symbol)) {

                symbol.forEach(function (symbol) {
                    _this2.unsubscribeFrom(symbol);
                });

                return;
            }

            this.socket.emit('unsubscribe_from', symbol);
        }
    }, {
        key: 'subscribeTo',
        value: function subscribeTo(symbol) {
            var _this3 = this;

            if (!this.socket.connected) {
                return console.log("You must be logged in before subscribing to symbols");
            }

            if (Array.isArray(symbol)) {
                symbol.forEach(function (symbol) {
                    _this3.subscribeTo(symbol);
                });

                return;
            }

            this.socket.emit('subscribe_to', symbol);
        }
    }, {
        key: 'subscribeToAll',
        value: function subscribeToAll() {
            if (!this.socket.connected) {
                return console.log("You must be logged in before subscribing to symbols");
            }

            this.socket.emit('subscribe_to_all');
        }
    }, {
        key: 'connect',
        value: function connect(login_function) {
            this.initializeSocketClient();
            this.post_login = login_function;
        }
    }, {
        key: 'disconnect',
        value: function disconnect() {
            this.socket.disconnect();
        }
    }, {
        key: 'onMessage',
        value: function onMessage(message_function) {
            this.socket.on('message', function (data) {
                message_function(data);
            });
        }
    }, {
        key: 'onDisconnect',
        value: function onDisconnect(disconnect_function) {
            this.socket.on('disconnect', function () {
                disconnect_function();
            });
        }
    }, {
        key: 'onUpdate',
        value: function onUpdate(update_function) {
            this.socket.on('update', function (data) {
                update_function(data.symbol, data);
            });
        }
    }, {
        key: 'get',
        value: function get(api_call) {
            return fetch(this.base_uri + api_call + '&api_key=' + this.api_key).then(function (response) {
                return response.json();
            }).then(function (json) {
                return json;
            }).catch(function (ex) {
                throw new Error(ex);
            });
        }
    }, {
        key: 'getQuotes',
        value: function getQuotes(pairs) {
            return this.get('quotes?cache=false&pairs=' + pairs.join(","));
        }
    }, {
        key: 'getSymbols',
        value: function getSymbols() {
            return this.get('symbols?cache=false');
        }
    }, {
        key: 'convert',
        value: function convert(from, to, quantity) {
            return this.get('convert?cache=false&from=' + from + '&to=' + to + '&quantity=' + quantity);
        }
    }, {
        key: 'marketStatus',
        value: function marketStatus() {
            return this.get('market_status?cache=false');
        }
    }, {
        key: 'quota',
        value: function quota() {
            return this.get('quota?cache=false');
        }
    }]);

    return ForexDataClient;
}();

module.exports = ForexDataClient;